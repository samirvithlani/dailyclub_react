MERN:
m:mongo db :
e:Express
r:react
n:node js

library   :  React js
          :  next,vite,remix
framework :Angular,spring,hibernate

db => 50 line... framework

dom node : create.aljlksslkas  --> 10

react js was developed by facebook : now it open source

js : browser 
js : server side : node js
-----------------------------------------------------------
JDK>2 JVM,jre --> .jar --> packages --> classes --> methods -->
node -->npm  --> node_modules --> build --> pacakges --> .js
C:\Program Files\nodejs npm\node_modules --> build 
node pacakge manager


d:
 projects
    batchname|comany|name
       open cmd
       npx create-react-app learning25



start: fe -->index.html -->be-->index.js --> app.js

spa: single page application: -index.html


component:
class based comp
function based comp: 16.x --> 18.x -->19.x
styling:



function :

download ext
ES7 +....


var name = "Ram";
  var age = 23;
  var isActive = false;
  var user = {
    id: 1,
    name: "Seeta",
  };

<h1>Hello</h1>
      <h1>Name = {name}</h1>
      <h2>Age = {age}</h2>
      <h3>Active? {isActive == true ? "Active" : "Not Active"}</h3>
      <h3>Active? {isActive ? "Active" : "Not Active"}</h3>
      <h1>id = {user.id}</h1>


communication bw  component
parent -> child component

there are 3 ways:
props:
context:
redux:


props:
property
props is immutable: Read only:

props data access only in immidiate child component
props drilling:


student list :

student component:
iterate: student list component


sales:
transcationID
unit
category:
profit

unit sold > 100 green
category grocessary || fashion : red only cat red...
profit: 30% green underline ... 




forgot password:->

click -->page --> user email [emter email]---> forgotpassword --> email --> backend check -->email exist->
if exist --> user email exist --> otp --> email --->
enter otp --> 1234 -->correct -->new page resetpasswod --> password --> 2nd api -->reset password -> email --> password update 

NOte:
1234
otp -->
1234 

otpSchema :- otp -->stgore :email time stamp:

if verify : delete
if not -> : delete


hooks:
react v 16: functional compoanet

either it is builtin functino: life cycle function

all hooks starts with use word

useState:

DOM: document object model:

react js virtual dom:

DOM --><<<< copy vdom

change --> DOM update...
react  vdom ---> will compare changes with ogdom -->


DOM:18:
16 : function comp: ---> hooks introduce..
hook: builtin funciton, lifecycle
use key word start:

html:
Virtual dom:

og : vcopy 

change : vdom --> dom....

 =compnsnt statevariable

 communication bw components:

 parent child componet


 

 react routing...
 npm install react-router-dom
 index.js -->
  <BrowserRouter> : - enable routing...
  App.js

<Routes>
<Route>

create component named Navbar --> bootstarp.

create folder named netflix :
NetflixHome
NetflixShow
:register thoses. app.js routes comp...

{
  required:
  {
    value:true,message:"Name is Required*"
  }
}
{
        required:{
            value:true,
            message:"age is required *"
        }   
}

useState:

constructor:
lifecycle function useEffect:
to handle side effect we can use useEffect